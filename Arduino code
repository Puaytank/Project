#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Adafruit_PWMServoDriver.h>

// LCD and PWM setup
LiquidCrystal_I2C lcd(0x27, 16, 2);
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver();

// Channel definitions
#define CH_SERVO_360 0
#define CH_SERVO_180 1

// MG995 180° servo pulse range
#define SERVO_MIN_PULSE 150
#define SERVO_MAX_PULSE 600

// 360° Servo directions (adjust for your MG995 360 mod)
#define SERVO_360_FORWARD 204
#define SERVO_360_REVERSE 410
#define SERVO_360_STOP    307

// States for sequence control
enum State {
  IDLE,
  REVERSE_360,
  COUNTDOWN,
  PROCESSING,
  SERVO_180_MOVE,
  FORWARD_360,
  DONE
};

State currentState = IDLE;

unsigned long stateStartTime = 0;
int countdownSeconds = 10;

const int progressSteps = 10;
int progressIndex = 0;
unsigned long stepDuration = 240;  // total 2400ms / 10 steps

String currentLabel = "";
int reverseDuration = 0;
bool forward360Needed = false;

// Map angle (0–180) to PWM pulse for MG995
uint16_t mapAngleToPulse(int angle) {
  return map(angle, 0, 180, SERVO_MIN_PULSE, SERVO_MAX_PULSE);
}

// Function prototypes
void startSequence(String label, int reverseMs, bool forward360);

void updateSequence();

void setup() {
  Serial.begin(9600);
  lcd.begin();
  lcd.backlight();

  pwm.begin();
  pwm.setPWMFreq(50);

  lcd.setCursor(0, 0);
  lcd.print("System Ready");
  lcd.setCursor(0, 1);
  lcd.print("Waiting...");
}

void loop() {
  if (currentState == IDLE) {
    if (Serial.available()) {
      String cmd = Serial.readStringUntil('\n');
      cmd.trim();

      if (cmd == "b") {
        startSequence("Recycle", 300, true);
      } else if (cmd == "a") {
        startSequence("Dangerous", 0, false);
      } else if (cmd == "c") {
        startSequence("Food waste", 700, true);
      } else if (cmd == "d") {
        startSequence("General", 1000, true);
      }
    }
  } else {
    updateSequence();
  }
}

void startSequence(String label, int reverseMs, bool forward360) {
  currentLabel = label;
  reverseDuration = reverseMs;
  forward360Needed = forward360;

  // Clear LCD and print label
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(label);

  // Start reverse 360 if needed, else skip
  if (reverseDuration > 0) {
    pwm.setPWM(CH_SERVO_360, 0, SERVO_360_REVERSE);
    stateStartTime = millis();
    currentState = REVERSE_360;
  } else {
    stateStartTime = millis();
    currentState = COUNTDOWN;
  }
}

void updateSequence() {
  unsigned long now = millis();
  unsigned long elapsed = now - stateStartTime;

  switch (currentState) {

    case REVERSE_360:
      if (elapsed >= reverseDuration) {
        pwm.setPWM(CH_SERVO_360, 0, SERVO_360_STOP);
        stateStartTime = now;
        currentState = COUNTDOWN;
      }
      break;

    case COUNTDOWN:
      {
        int secLeft = countdownSeconds - elapsed / 1000;
        if (secLeft < 0) secLeft = 0;

        lcd.setCursor(0, 1);
        lcd.print("Throw it in ");
        lcd.print(secLeft);
        lcd.print("   ");

        if (elapsed >= countdownSeconds * 1000) {
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Processing...");
          lcd.setCursor(0, 1);
          lcd.print("[          ]");

          progressIndex = 0;
          stateStartTime = now;
          currentState = PROCESSING;
        }
      }
      break;

    case PROCESSING:
      if (elapsed >= stepDuration) {
        if (progressIndex < progressSteps) {
          // Only print '=' starting from progressIndex 1 (no zero)
          if (progressIndex > 0) {
            lcd.setCursor(1 + progressIndex - 1, 1); // Progress bar starts inside the brackets
            lcd.print("=");
          }

          if (progressIndex == 0) {
            // Move servo 180 to 30°
            pwm.setPWM(CH_SERVO_180, 0, mapAngleToPulse(30));
          }
          else if (progressIndex == 2) {
            // Move servo 180 to 90° (changed from 110°)
            pwm.setPWM(CH_SERVO_180, 0, mapAngleToPulse(90));
          }
          else if (progressIndex == 4) {
            // Move servo 180 back to 30°
            pwm.setPWM(CH_SERVO_180, 0, mapAngleToPulse(30));
          }

          progressIndex++;
          stateStartTime = now;
        } else {
          // After servo 180 finished, move 360 forward if needed
          if (forward360Needed) {
            pwm.setPWM(CH_SERVO_360, 0, SERVO_360_FORWARD);
            stateStartTime = now;
            currentState = FORWARD_360;
          } else {
            currentState = DONE;
          }
        }
      }
      break;

    case FORWARD_360:
      if (elapsed >= reverseDuration) {
        pwm.setPWM(CH_SERVO_360, 0, SERVO_360_STOP);
        currentState = DONE;
      }
      break;

    case DONE:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("System Ready");
      lcd.setCursor(0, 1);
      lcd.print("Waiting...");
      currentState = IDLE;
      break;

    default:
      break;
  }
}
